CREATE VIEW IF NOT EXISTS "SHOPPING_LISTS_WITH_ADDITIONAL_INFO" AS SELECT 
SHOPPING_LISTS._id AS _id,
SHOPPING_LISTS.NAME AS NAME,
SHOPPING_LISTS.IS_FILTERED,
IFNULL(SUM(SHOPPING_LIST_CONTENT.IS_CHECKED), 0) AS NUMBER_OF_CROSSED_OUT,
IFNULL(SUM(CASE WHEN IFNULL(SHOPPING_LIST_CONTENT.PRICE, -1) >= 0
       THEN 
SHOPPING_LIST_CONTENT.PRICE
       ELSE IFNULL(PRODUCTS.LAST_PRICE, 0)
       END * IFNULL(SHOPPING_LIST_CONTENT.COUNT, 0))  , 0) AS TOTAL_SUM,
IFNULL(SUM(
CASE WHEN IFNULL(SHOPPING_LIST_CONTENT.IS_CHECKED, 0)
       THEN 
0
       ELSE CASE WHEN IFNULL(SHOPPING_LIST_CONTENT.PRICE, -1) >= 0
       THEN 
SHOPPING_LIST_CONTENT.PRICE
       ELSE IFNULL(PRODUCTS.LAST_PRICE, 0)
       END
       END * IFNULL(SHOPPING_LIST_CONTENT.COUNT, 0)
), 0) AS LEFT_TO_BUY_ON,
COUNT(SHOPPING_LIST_CONTENT._id) AS TOTAL_COUNT
FROM SHOPPING_LISTS 
LEFT OUTER JOIN SHOPPING_LIST_CONTENT 
ON SHOPPING_LISTS._id = SHOPPING_LIST_CONTENT.SHOPPING_LIST_ID
LEFT OUTER JOIN PRODUCTS ON SHOPPING_LIST_CONTENT.PRODUCT_ID =PRODUCTS._id 
GROUP BY SHOPPING_LISTS._id, SHOPPING_LISTS.NAME, SHOPPING_LISTS.IS_FILTERED;

CREATE VIEW "PRODUCTS_WITH_ADDITIONAL_INFO" AS     select PRODUCTS._id AS PRODUCT_ID, PRODUCTS.NAME, PRODUCTS.PICTURE, PRODUCTS.LAST_PRICE,  
CATEGORIES.CATEGORY_ID AS CATEGORY_ID,
CATEGORIES.CATEGORY_NAME AS CATEGORY_NAME,
CATEGORIES.CATEGORY_ORDER AS CATEGORY_ORDER,
CATEGORIES.CATEGORY_PICTURE_URI AS CATEGORY_PICTURE_URI,
UNITS.UNIT_ID AS UNIT_ID,
UNITS.UNIT_NAME AS UNIT_NAME,
UNITS.UNIT_SHORT_NAME AS UNIT_SHORT_NAME
from PRODUCTS 
LEFT OUTER JOIN CATEGORIES ON PRODUCTS.CATEGORY_ID = CATEGORIES.CATEGORY_ID
LEFT OUTER JOIN UNITS ON PRODUCTS.DEFAULT_UNIT_ID = UNITS.UNIT_ID;

CREATE VIEW "SHOPPING_LIST_CONTENT_WITH_ADDITIONAL_INFO" AS select
SHOPPING_LIST_CONTENT._id AS SHOPPING_LIST_ROW_ID,
SHOPPING_LIST_CONTENT.*,
PRODUCTS.*,
CATEGORIES.*,
UNITS.*,
DEFAULT_UNITS.UNIT_ID AS DEFAULT_UNIT_ID,
DEFAULT_UNITS.UNIT_NAME AS DEFAULT_UNIT_NAME,
DEFAULT_UNITS.UNIT_SHORT_NAME AS DEFAULT_UNIT_SHORT_NAME
from SHOPPING_LIST_CONTENT
LEFT OUTER JOIN 
PRODUCTS ON SHOPPING_LIST_CONTENT.PRODUCT_ID = PRODUCTS._id
LEFT OUTER JOIN 
CATEGORIES ON PRODUCTS .CATEGORY_ID = CATEGORIES.CATEGORY_ID
LEFT OUTER JOIN 
UNITS AS DEFAULT_UNITS ON PRODUCTS .DEFAULT_UNIT_ID = DEFAULT_UNITS.UNIT_ID
LEFT OUTER JOIN 
UNITS ON SHOPPING_LIST_CONTENT.UNIT_ID = UNITS .UNIT_ID;

CREATE TABLE IF NOT EXISTS "UNITS" ("UNIT_ID" INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL  UNIQUE , "UNIT_NAME" TEXT, "UNIT_SHORT_NAME" TEXT);
INSERT INTO UNITS(UNIT_ID,UNIT_NAME,UNIT_SHORT_NAME) VALUES(1,'Pieces','pcs.');
INSERT INTO UNITS(UNIT_ID,UNIT_NAME,UNIT_SHORT_NAME) VALUES(2,'Kilogram','kg.');
INSERT INTO UNITS(UNIT_ID,UNIT_NAME,UNIT_SHORT_NAME) VALUES(3,'Gram','g.');
INSERT INTO UNITS(UNIT_ID,UNIT_NAME,UNIT_SHORT_NAME) VALUES(4,'Liter','l.');
INSERT INTO UNITS(UNIT_ID,UNIT_NAME,UNIT_SHORT_NAME) VALUES(5,'Milliliter','ml.');
INSERT INTO UNITS(UNIT_ID,UNIT_NAME,UNIT_SHORT_NAME) VALUES(6,'Ton','t.');
INSERT INTO UNITS(UNIT_ID,UNIT_NAME,UNIT_SHORT_NAME) VALUES(7,'Square meter','m2');
INSERT INTO UNITS(UNIT_ID,UNIT_NAME,UNIT_SHORT_NAME) VALUES(8,'Cubic meter','m3');

ALTER TABLE "PRODUCTS" ADD COLUMN "LAST_PRICE" REAL NOT NULL DEFAULT 0;
ALTER TABLE "PRODUCTS" ADD COLUMN "DEFAULT_UNIT_ID" INTEGER;
ALTER TABLE "SHOPPING_LIST_CONTENT" ADD COLUMN "PRICE" REAL NOT NULL DEFAULT 0;
ALTER TABLE "SHOPPING_LIST_CONTENT" ADD COLUMN "UNIT_ID" INTEGER;

CREATE TABLE IF NOT EXISTS PRICE_CHANGE_HISTORY ("_id" INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL  UNIQUE , "PRODUCT_ID" INTEGER NOT NULL , "DATE" DATETIME NOT NULL , "PRICE" REAL);
